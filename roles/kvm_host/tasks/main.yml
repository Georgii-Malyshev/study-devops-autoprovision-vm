---
# Check and prepare a virtualization host (hypervisor)

- name: Check CPU for virtualization and KVM acceleration support
  ansible.builtin.shell: egrep 'vmx|svm|0xc0f' /proc/cpuinfo
  register: check_cpu_result
  # egrep returns code 1 if given string wasn't found, so if that's the case,
  # don't fail yet - fail with a corresponding custom message
  failed_when: check_cpu_result.rc != 0 and check_cpu_result.rc != 1
  changed_when: False

- name: Fail with a corresponding message if no virtualization support detected
  fail:
    msg: "No virtualization support detected on host CPU"
  when: "check_cpu_result.rc == 1"

- name: Load KVM kernel module
  community.general.modprobe:
    name: kvm
    state: present

- name: Set cpu_manufacturer as Intel if "Intel" found in processor facts
  set_fact:
    cpu_manufacturer: "Intel"
  loop: "{{ ansible_processor }}"
  when: item is search('Intel', ignorecase=True)

- name: Set cpu_manufacturer as AMD if "AMD" found in processor facts
  set_fact:
    cpu_manufacturer: "AMD"
  loop: "{{ ansible_processor }}"
  when: item is search('AMD', ignorecase=True)

- name: Load kvm_intel kernel module if CPU manufacturer is Intel
  community.general.modprobe:
    name: kvm_intel
    state: present
  when: cpu_manufacturer == 'Intel'

- name: Load kvm_amd kernel module if CPU manufacturer is AMD
  community.general.modprobe:
    name: kvm_amd
    state: present
  when: cpu_manufacturer == 'AMD'

- name: Install virtualization-related packages ignoring "install-recommends"
  ansible.builtin.package:
    name:
      - qemu-system
      - libvirt-clients
      - libvirt-daemon-system
      - virtinst
    state: latest
    install_recommends: no

- name: Install dependencies for community.libvirt.virt_*
  pip:
    name:
      - libvirt-python
      - lxml


#Set up a virtual network

- name: Setup virtual network
  community.libvirt.virt_net:
    command: define # TODO non-idempotent command! Consider making some checks beforehand
    name: vnet01
    xml: '{{ lookup("template", "vnet01.j2")}}'

- name: Make virtual network active
  community.libvirt.virt_net:
    name: vnet01
    state: active

- name: Make virtual network start automatically
  community.libvirt.virt_net:
    name: vnet01
    autostart: yes


# Set up a storage pool

- name: Create directory for VM images storage pool
  file:
    path: '{{ libvirt_pool_dir }}'
    state: directory

- name: Setup storage pool
  community.libvirt.virt_pool:
    command: define # TODO non-idempotent command! Consider making some checks beforehand
    name: "{{ libvirt_pool_name }}"
    xml: '{{ lookup("template", "vm-img-pool.xml.j2") }}'

- name: Make storage pool active
  community.libvirt.virt_pool:
    name: "{{ libvirt_pool_name }}"
    state: active

- name: Make storage pool start automatically
  community.libvirt.virt_pool:
    name: "{{ libvirt_pool_name }}"
    autostart: yes
