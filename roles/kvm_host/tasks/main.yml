---
# Check and prepare a virtualization host (hypervisor)

- name: Check CPU for virtualization and KVM acceleration support
  ansible.builtin.shell: egrep 'vmx|svm|0xc0f' /proc/cpuinfo
  register: check_cpu_result
  # egrep returns code 1 if given string wasn't found, so if that's the case,
  # don't fail yet - fail with a corresponding custom message
  failed_when: check_cpu_result.rc != 0 and check_cpu_result.rc != 1
  changed_when: False

- name: Fail with a corresponding message if no virtualization support detected
  fail:
    msg: "No virtualization support detected on host CPU"
  when: "check_cpu_result.rc == 1"

- name: Load KVM kernel module
  community.general.modprobe:
    name: kvm
    state: present

- name: Set cpu_manufacturer as Intel if "Intel" found in processor facts
  set_fact:
    cpu_manufacturer: "Intel"
  loop: "{{ ansible_processor }}"
  when: item is search('Intel', ignorecase=True)

- name: Set cpu_manufacturer as AMD if "AMD" found in processor facts
  set_fact:
    cpu_manufacturer: "AMD"
  loop: "{{ ansible_processor }}"
  when: item is search('AMD', ignorecase=True)

- name: Load kvm_intel kernel module if CPU manufacturer is Intel
  community.general.modprobe:
    name: kvm_intel
    state: present
  when: cpu_manufacturer == 'Intel'

- name: Load kvm_amd kernel module if CPU manufacturer is AMD
  community.general.modprobe:
    name: kvm_amd
    state: present
  when: cpu_manufacturer == 'AMD'

- name: Install virtualization-related packages ignoring "install-recommends"
  ansible.builtin.package:
    name:
      - qemu-system
      - libvirt-clients
      - libvirt-daemon-system
      - virtinst
    state: latest
    install_recommends: no

- name: Install dependencies for community.libvirt.virt_*
  pip:
    name:
      - libvirt-python
      - lxml

#Set up a virtual network

- name: Setup virtual network
  community.libvirt.virt_net:
    command: define # TODO non-idempotent command! Consider making some checks beforehand
    name: vnet01
    xml: '{{ lookup("template", "vnet01.j2")}}'

- name: Make virtual network active
  community.libvirt.virt_net:
    name: vnet01
    state: active

- name: Make virtual network start automatically
  community.libvirt.virt_net:
    name: vnet01
    autostart: yes

# Set up a storage pool

- name: Create directory for VM images storage pool
  file:
    path: '{{ libvirt_pool_dir }}'
    state: directory

- name: Setup storage pool
  community.libvirt.virt_pool:
    command: define # TODO non-idempotent command! Consider making some checks beforehand
    name: "{{ libvirt_pool_name }}"
    xml: '{{ lookup("template", "vm-img-pool.xml.j2") }}'

- name: Make storage pool active
  community.libvirt.virt_pool:
    name: "{{ libvirt_pool_name }}"
    state: active

- name: Make storage pool start automatically
  community.libvirt.virt_pool:
    name: "{{ libvirt_pool_name }}"
    autostart: yes

# Create libvirt volume for VM

- name: Check whether the volume exists
  ansible.builtin.shell: |
    virsh vol-list --pool={{ libvirt_pool_name }} | grep "{{ vm_volume_name }}"
  register:
    volume_search_result
  # grep returns code 1 if given string wasn't found, so don't fail if that's the case
  failed_when: volume_search_result.rc != 0 and volume_search_result.rc != 1
  changed_when: False

- name: Create volume if it doesn't exist
  block:
    - name: Create XML file for the volume definition from template
      ansible.builtin.template:
        src: vm-volume.xml.j2
        dest: "vm-volume.xml"
    - name: Create volume
      ansible.builtin.shell: |
        virsh vol-create --pool={{ libvirt_pool_name }} vm-volume.xml
  when: volume_search_result.rc == 1

# Create VM image

- name: Download base image
  ansible.builtin.get_url:
    url: '{{ base_image_url }}'
    dest: '{{ base_image_download_dest }}'
    checksum: sha256:'{{ base_image_sha256sum }}'

- name: Copy base image to storage pool directory
  ansible.builtin.copy:
    src: '{{ base_image_download_dest }}'
    dest: '{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2'
    force: no
    remote_src: yes
    mode: '0660'
  register: copy_result

# TODO make this task idempotent
- name: Resize VM image
  ansible.builtin.command: |
    qemu-img resize '{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2' {{ vm_image_size_GB }}G

- name: Template out cloud-init's userdata config file
  ansible.builtin.template:
    src: userdata.j2
    dest: cloud-init/userdata.yml  # TODO consider deleting this file after provisioning the VM
    owner: root
    group: root
    mode: '0770'

- name: Create cloud-init seed image
  ansible.builtin.command: |
    cloud-localds -v \
    --network-config=cloud-init/network.yml \
    {{ libvirt_pool_dir }}/{{ vm_name }}-seed.qcow2 \
    cloud-init/userdata.yml

# Set up the VM

- name: Get a list of all VMs that are defined on host
  community.libvirt.virt:
    command: list_vms
  register: vm_list

- name: Set fact 'vm_exists' to 'False' before checking whether the VM exists
  set_fact:
    vm_exists: False

- name: Check whether the VM exists
  set_fact:
    vm_exists: True
  loop: '{{ vm_list.list_vms }}'
  when: item is search('{{ vm_name }}')

- name: Create VM if it doesn't exist
  block:
    - name: Create XML file for the VM definition from template
      ansible.builtin.template:
        src: vm-domain.xml.j2
        dest: "vm-domain.xml"

    - name: Create the VM
      community.libvirt.virt:
        command: define
        xml: '{{ lookup("template", "vm-domain.xml.j2")}}'

    - name: Stop the VM from starting automatically
      community.libvirt.virt:
        name: '{{ vm_name }}'
        autostart: no
  when: vm_exists == False
  notify: Remove old key

- name: Start the VM
  community.libvirt.virt:
    name: '{{ vm_name }}'
    state: running
