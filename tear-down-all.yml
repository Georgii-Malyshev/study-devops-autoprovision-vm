---
# This playbook destroys virtual infrastructure that other playbooks set up:
# VM, virtual network, associated libvirt volumes and pool, XML configuration files
# run this playbook with --ask-become-pass option if needed

- name: Tear down virtual infrastructure
  hosts: kvm_hosts
  connection: local
  become: yes
  become_method: sudo

  tasks:
    # Destroy VM
    - name: Get a list of all VMs that are defined on host
      community.libvirt.virt:
        command: list_vms
      register: vm_list

    - name: Set fact 'vm_exists' to 'False' before checking whether the VM exists
      set_fact:
        vm_exists: False

    - name: Check whether the VM exists
      set_fact:
        vm_exists: True
      loop: '{{ vm_list.list_vms }}'
      when: item is search('{{ vm_name }}')

    - name: Destroy created VM if it exists
      community.libvirt.virt:
        name: '{{ vm_name }}'
        state: destroyed
      when: vm_exists == True

    - name: Undefine created VM if it exists
      community.libvirt.virt:
        name: '{{ vm_name }}'
        command: undefine
      when: vm_exists == True

    # Destroy virtual network
    - name: Get a list of all virtual networks that are defined on host
      community.libvirt.virt_net:
        command: list_nets
      register: vnet_list

    - name: Set fact 'vnet_exists' to 'False' before checking whether the virtual network exists
      set_fact:
        vnet_exists: False

    - name: Check whether the virtual network exists
      set_fact:
        vnet_exists: True
      loop: '{{ vnet_list.list_nets }}'
      when: item is search('{{ vnet_name }}')

    - name: Destroy created virtual network
      community.libvirt.virt_net:
        name: '{{ vnet_name }}'
        state: absent
      when: vnet_exists == True

    # Destroy libvirt pool
    - name: Deactivate created pool
      community.libvirt.virt_pool:
        name: '{{ libvirt_pool_name }}'
        state: inactive

    - name: Delete volume files # necessary so that pool can be deleted
      ansible.builtin.shell: rm -rf '{{ libvirt_pool_dir }}'/*

    - name: Delete created pool
      community.libvirt.virt_pool:
        name: '{{ libvirt_pool_name }}'
        state: deleted

    - name: Delete generated XML files # TODO check if files exist before executing OR check return code of rm command
      ansible.builtin.command: rm vm-domain.xml vm-volume.xml
